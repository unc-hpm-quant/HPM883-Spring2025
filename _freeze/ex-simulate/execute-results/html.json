{
  "hash": "a88b9644c666a89151d61354b37fe0c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simulating Experimental Data with Noncompliance\"\nauthor: \"Your Name\"\ndate: \"2025-01-20\"\nformat: html\n---\n\n\n\n\n\n\n# Simulating Experimental Data for a Randomized Experiment\n\nIn this example, we simulate data for a simple randomized experiment with one treatment and one control group. The randomization is at the individual level. Additionally, we introduce noncompliance, where some individuals assigned to the treatment group do not take the treatment.\n\n------------------------------------------------------------------------\n\n## Step 1: Setup and Parameters\n\nDefine the parameters for the experiment, such as the number of participants, compliance rate, and treatment effects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(123)\n\n# Parameters\nn <- 500  # Total number of participants\nprob_treatment <- 0.5  # Probability of being assigned to treatment\ncompliance_rate <- 0.8  # Proportion of treated participants who comply\n\n# Treatment effect\nbaseline_mean <- 50  # Mean outcome for control group\ntreatment_effect <- 10  # Additional effect for treated participants\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Step 2: Random Assignment and Compliance\n\nSimulate random assignment to treatment and compliance behavior.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate random assignment\nassignment <- rbinom(n, 1, prob_treatment)  # 1 = assigned to treatment, 0 = control\n\n# Simulate compliance behavior\n# If assigned to treatment, comply with probability `compliance_rate`\ncompliance <- ifelse(assignment == 1, rbinom(n, 1, compliance_rate), 0)  # 1 = complied, 0 = did not comply\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Step 3: Simulate Outcomes\n\nSimulate the outcome variable based on compliance and treatment assignment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate outcomes\noutcome <- baseline_mean + \n  (assignment * compliance * treatment_effect) +  # Effect for those who comply\n  rnorm(n, mean = 0, sd = 5)  # Add random noise\n\n# Combine data into a data frame\nexperiment_data <- data.frame(\n  ID = 1:n,\n  Assignment = assignment,\n  Compliance = compliance,\n  Outcome = outcome\n)\n\n# View the first few rows of the data\nhead(experiment_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID Assignment Compliance  Outcome\n1  1          0          0 46.99054\n2  2          1          1 55.03151\n3  3          0          0 55.13393\n4  4          1          1 63.75531\n5  5          1          1 52.45417\n6  6          0          0 49.52426\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Step 4: Export Data to CSV\n\nExport the simulated data to a CSV file for further analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export the data to a CSV file\nwrite.csv(experiment_data, \"simulated_experiment_data.csv\", row.names = FALSE)\n\n# Confirm export\ncat(\"Data has been exported to 'simulated_experiment_data.csv'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nData has been exported to 'simulated_experiment_data.csv'\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}